.build-docker:
  script:
    - |
      cd deployment/docker

      BUILD_CMDS=$(decomposerize compose-deploy.yml --docker-build)
      PARALLEL_JOBS=$(nproc 2>/dev/null || grep -c ^processor /proc/cpuinfo 2>/dev/null || echo 4)

      build_image() {
        local BUILD_CMD="$1"
        echo "Running: $BUILD_CMD"
        eval "$BUILD_CMD"

        local IMAGE_NAME=$(echo "$BUILD_CMD" | sed -nE 's/.*-t\s+"?([^"]+)"?.*/\1/p')
        IMAGE_NAME=$(eval echo "$IMAGE_NAME")
        echo "Image built: $IMAGE_NAME"

        if [[ "$ENV" != "build" ]]; then
          local TAR_NAME="${IMAGE_NAME//:/-}.tar"
          docker save -o "$TAR_NAME" "$IMAGE_NAME"
        fi
      }

      export -f build_image

      IMAGE_COUNT=$(echo "$BUILD_CMDS" | wc -l)
      if [ "$IMAGE_COUNT" -gt 1 ]; then
        echo "Detected $IMAGE_COUNT images to build. Running in parallel with $PARALLEL_JOBS jobs..."
        
        # Run builds in parallel
        echo "$BUILD_CMDS" | parallel --jobs "$PARALLEL_JOBS" build_image
      else
        # Only one image, use the regular sequential approach
        while IFS= read -r BUILD_CMD; do
          build_image "$BUILD_CMD"
        done <<< "$BUILD_CMDS"
      fi
