---
- name: Deploy Docker Images to Remote Server
  hosts: all:!localhost
  vars:
    compose_path: "../deployment/docker/compose-deploy.yml"
    tmp_dir: "/tmp"
    decomposerize_types:
      - name: "setup"
        options: "--create-networks --create-volumes --stop-and-remove"
        ignore_errors: yes  # Networks/volumes might already exist
      - name: "run"
        options: "--docker-run --docker-run-detach"
        ignore_errors: no
      - name: "cleanup"
        options: "--delete-images"
        ignore_errors: yes  # New images are used by containers
  roles:
    - role: geerlingguy.docker
    - role: nginx
      tags:
        - nginx
    - role: private_ssh_keys
    - role: services
    - role: image-transfer
      tags:
        - image-transfer    
  tasks:
    # Process each decomposerize command type
    - name: Process Docker commands for each type
      loop: "{{ decomposerize_types }}"
      loop_control:
        loop_var: cmd_type
      block:
        - name: Generate {{ cmd_type.name }} commands as template
          shell: decomposerize "{{ compose_path }}" {{ cmd_type.options }} --ansible-env-vars-format > {{ tmp_dir }}/decomposerize_{{ cmd_type.name }}.j2
          delegate_to: localhost
          changed_when: false

        - name: Render template with evaluated variables
          template:
            src: "{{ tmp_dir }}/decomposerize_{{ cmd_type.name }}.j2"
            dest: "{{ tmp_dir }}/decomposerize_{{ cmd_type.name }}_rendered.sh"
          delegate_to: localhost
          changed_when: false

        - name: Get rendered commands
          slurp:
            src: "{{ tmp_dir }}/decomposerize_{{ cmd_type.name }}_rendered.sh"
          delegate_to: localhost
          register: rendered_script
          changed_when: false

        - name: Split script into commands
          set_fact:
            current_commands: >-
              {{
                rendered_script.content
                | b64decode
                | split('\n')
                | map('trim')
                | select('truthy')  
                | list
              }}
          changed_when: false

        - name: Execute commands on target host
          shell: "{{ item }}"
          loop: "{{ current_commands }}"
          when: current_commands is defined and current_commands | length > 0
          ignore_errors: "{{ cmd_type.ignore_errors }}"
          register: command_results
          changed_when: command_results.rc == 0