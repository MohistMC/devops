name: Build and Deploy

on:
  workflow_call:
    inputs:
      tag:
        required: true
        type: string
        description: "The tag to deploy, e.g. 1.0.0 or 1.0.0-staging"

env:
  DEVOPS_REPOSITORY_URL: https://github.com/Shawiizz/devops-framework.git
  DEVOPS_FRAMEWORK_VERSION: 1.0.25

jobs:
  discover-hosts:
    runs-on: ubuntu-latest
    name: Discover deployment hosts
    outputs:
      hosts: ${{ steps.discover.outputs.hosts }}
      env: ${{ steps.discover.outputs.env }}
      tag: ${{ steps.discover.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Discover hosts and environment
        id: discover
        run: |
          TAG="${{ inputs.tag }}"
          ENVIRONMENT="production"

          if [[ "$TAG" == *"-"* ]]; then
            ENVIRONMENT="${TAG##*-}"
          fi

          echo "env=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          
          if [ ! -f "deployment/env/.env.${ENVIRONMENT}" ]; then
              echo "::error:: File deployment/env/.env.${ENVIRONMENT} does not exist, cannot execute on unknown environment"
              exit 1
          fi
          
          #######################################
          ###### Discover hosts to deploy #######
          #######################################
          HOSTS_LIST=()
          BASE_FILE="deployment/env/.env.${ENVIRONMENT}"
          
          if [ -f "$BASE_FILE" ]; then
            HOSTS_LIST+=("main")
          fi
          
          for env_file in deployment/env/.env.${ENVIRONMENT}.*; do
            if [ -f "$env_file" ]; then
              SUFFIX=$(basename "$env_file" | sed "s/\.env\.${ENVIRONMENT}\.//")
              if [[ "$SUFFIX" != "${ENVIRONMENT}" ]]; then
                HOSTS_LIST+=("$SUFFIX")
              fi
            fi
          done
          
          HOSTS_JSON="["
          for i in "${!HOSTS_LIST[@]}"; do
            if [ $i -eq 0 ]; then
              HOSTS_JSON="$HOSTS_JSON\"${HOSTS_LIST[$i]}\""
            else
              HOSTS_JSON="$HOSTS_JSON,\"${HOSTS_LIST[$i]}\""
            fi
          done
          HOSTS_JSON="$HOSTS_JSON]"
          
          echo "hosts=$HOSTS_JSON" >> $GITHUB_OUTPUT
          echo "Discovered hosts: $HOSTS_JSON"

  build-and-deploy:
    runs-on: ubuntu-latest
    name: Build and Deploy to host ${{ matrix.host }}
    needs: discover-hosts
    strategy:
      matrix:
        host: ${{ fromJson(needs.discover-hosts.outputs.hosts) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup environment variables for host ${{ matrix.host }}
        id: vars
        run: |
          ENV="${{ needs.discover-hosts.outputs.env }}"
          HOST="${{ matrix.host }}"
          
          if [[ "$HOST" == "main" ]]; then
            SSH_SECRET_NAME="$(echo "${ENV}" | tr '[:lower:]' '[:upper:]')_SSH_PRIVATE_KEY"
          else
            SSH_SECRET_NAME="$(echo "${ENV}" | tr '[:lower:]' '[:upper:]')_$(echo "${HOST}" | tr '[:lower:]' '[:upper:]')_SSH_PRIVATE_KEY"
          fi

          echo "env=$ENV" >> $GITHUB_OUTPUT
          echo "host=$HOST" >> $GITHUB_OUTPUT
          echo "tag=${{ needs.discover-hosts.outputs.tag }}" >> $GITHUB_OUTPUT
          echo "SSH_KEY_SECRET_NAME=$SSH_SECRET_NAME" >> $GITHUB_ENV

      - name: Install docker-decompose
        run: npm i -g shawiizz-decomposerize

      - name: Clone devops repository
        run: git clone --branch "$DEVOPS_FRAMEWORK_VERSION" "$DEVOPS_REPOSITORY_URL" devops

      - name: Load environment variables and build/deploy for host ${{ matrix.host }}
        run: |          
          # Load secrets as environment variables
          echo '${{ toJSON(secrets) }}' > secrets.json
          for key in $(jq -r 'keys[]' secrets.json); do
            value=$(jq -r --arg key "$key" '.[$key]' secrets.json)
            export "$key=$value"
          done

          ENV="${{ steps.vars.outputs.env }}"
          HOST="${{ steps.vars.outputs.host }}"
          
          # Charger le fichier de base
          set -a
          source "deployment/env/.env.${ENV}"
          set +a
          
          # Si ce n'est pas l'hôte principal, charger aussi le fichier spécifique à l'hôte
          if [[ "$HOST" != "main" ]]; then
            if [ -f "deployment/env/.env.${ENV}.${HOST}" ]; then
              set -a
              source "deployment/env/.env.${ENV}.${HOST}"
              set +a
            fi
          fi
          
          export ENV="${{ steps.vars.outputs.env }}"
          export VERSION="${{ steps.vars.outputs.tag }}"

          #######################################
          ######### Build docker images #########
          #######################################
          if [[ "$HOST" == "main" ]]; then
            bash devops/.github/scripts/build_docker_images.sh
          else
            bash devops/.github/scripts/build_docker_images.sh --host="$HOST"
          fi
          
          #######################################
          ############ Setup SSH Key ############
          #######################################
          mkdir -p devops/ssh
          echo "${{ secrets[env.SSH_KEY_SECRET_NAME] }}" | tr -d '\r' > devops/ssh/remote_private_key
          chmod 600 devops/ssh/*
          eval "$(ssh-agent -s)"
          ssh-add devops/ssh/remote_private_key

          #######################################
          ######### Deploy with Ansible #########
          #######################################
          cd devops
          export ANSIBLE_HOST_KEY_CHECKING=False
          export ANSIBLE_BECOME_PASSWORD=${{ secrets.ANSIBLE_BECOME_PASSWORD }}

          SKIP_TAGS="configure_host"
          if [ ! -d "../deployment/templates/nginx" ] || [ -z "$(ls -A ../deployment/templates/nginx 2>/dev/null)" ]; then
            echo "No nginx configuration found, skipping nginx role"
            SKIP_TAGS="${SKIP_TAGS},nginx"
          fi
          
          # Créer un inventaire spécifique pour cet hôte
          if [[ "$HOST" == "main" ]]; then
            INVENTORY_HOST="${ENV}"
          else
            INVENTORY_HOST="${ENV}-${HOST}"
          fi
          
          sed -i "s/REMOTE_HOST/${INVENTORY_HOST}/g" ansible/inventory.yml
          ansible-galaxy role install geerlingguy.docker
          ansible-playbook ansible/deploy.yml -i ansible/inventory.yml --skip-tags "$SKIP_TAGS"
