name: Build and Deploy

on:
  workflow_call:
    inputs:
      tag:
        required: true
        type: string

env:
  DEVOPS_REPOSITORY_URL: https://github.com/Shawiizz/devops.git

jobs:
  deploy-build:
    runs-on: ubuntu-latest
    name: Build Docker images

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        id: vars
        run: |
          TAG="${{ inputs.tag }}"
          ENVIRONMENT="production"

          if [[ "$TAG" == *"-"* ]]; then
            ENVIRONMENT="${TAG##*-}"
          fi

          echo "env=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          
          if [ ! -f "deployment/env/.env.${ENVIRONMENT}" ]; then
              echo "::error:: File deployment/env/.env.${ENVIRONMENT} does not exist, cannot execute on unknown environment"
              exit 1
          fi

      - name: Install docker-decompose
        run: npm i -g shawiizz-decomposerize

      - name: Clone devops repository
        run: git clone "$DEVOPS_REPOSITORY_URL" ansible

      - name: Build and export Docker images (${{ steps.vars.outputs.env }})
        run: |
          while IFS= read -r line || [[ -n "$line" ]]; do
            [[ "$line" =~ ^[[:space:]]*#.*$ || -z "$line" ]] && continue
            [[ "$line" =~ ^[A-Za-z_][A-Za-z0-9_]*= ]] && export "$line"
          done < <(cat "deployment/env/.env.${{ steps.vars.outputs.env }}"; echo)
          export ENV=${{ steps.vars.outputs.env }}
          export VERSION=${{ steps.vars.outputs.tag }}

          bash ansible/.github/scripts/build_docker_images.sh

      - name: Upload image artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: 'deployment/docker/*.tar'
          retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    name: Deploy with Ansible
    needs: deploy-build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clone devops repository
        run: git clone "$DEVOPS_REPOSITORY_URL" ansible

      - name: Download Docker image artifacts
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: ./docker_images

      - name: Set environment variables
        id: vars
        run: |
          TAG="${{ inputs.tag }}"
          if [[ "$TAG" == *"-"* ]]; then
            ENV="${TAG##*-}"
          else
            ENV="production"
          fi

          SSH_SECRET_NAME="$(echo "${ENV}" | tr '[:lower:]' '[:upper:]')_SSH_PRIVATE_KEY"

          echo "env=$ENV" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "SSH_KEY_SECRET_NAME=$SSH_SECRET_NAME" >> $GITHUB_ENV

      - name: Setup SSH Key & Run Ansible (${{ steps.vars.outputs.env }})
        run: |
          while IFS= read -r line || [[ -n "$line" ]]; do
            [[ "$line" =~ ^[[:space:]]*#.*$ || -z "$line" ]] && continue
            [[ "$line" =~ ^[A-Za-z_][A-Za-z0-9_]*= ]] && export "$line"
          done < <(cat "deployment/env/.env.${{ steps.vars.outputs.env }}"; echo)

          echo '${{ toJSON(secrets) }}' > secrets.json

          for key in $(jq -r 'keys[]' secrets.json); do
            value=$(jq -r --arg key "$key" '.[$key]' secrets.json)
            export "$key=$value"
          done

          export ENV=${{ steps.vars.outputs.env }}
          export VERSION=${{ steps.vars.outputs.tag }}

          mkdir -p ansible/ssh
          echo "${{ secrets[env.SSH_KEY_SECRET_NAME] }}" | tr -d '\r' > ansible/ssh/main_private_key
          chmod 600 ansible/ssh/*
          eval "$(ssh-agent -s)"
          ssh-add ansible/ssh/main_private_key

          cd ansible
          export ANSIBLE_HOST_KEY_CHECKING=False
          export ANSIBLE_BECOME_PASSWORD=${{ secrets.ANSIBLE_BECOME_PASSWORD }}

          SKIP_TAGS="configure_host"
          if [ ! -d "../deployment/templates/nginx" ] || [ -z "$(ls -A ../deployment/templates/nginx 2>/dev/null)" ]; then
            echo "No nginx configuration found, skipping nginx role"
            SKIP_TAGS="${SKIP_TAGS},nginx"
          fi

          npm i -g shawiizz-decomposerize
          ansible-galaxy role install geerlingguy.docker
          ansible-playbook deploy.yml -i "$HOST," --user="$ANSIBLE_USER" --private-key=ansible/ssh/main_private_key --skip-tags "$SKIP_TAGS"
